1. longest consecutive sequence: the straightforward way is to sort the array first, and then
loop one more time and use 2 pointers to keep track of the start and end index and another
variable for the maximum consecutive length. the complexity is the sorting part O(nlogn).
A better/desired way is to use set and mimic deep search in graph for the longest
sequence. first, put all elements to a hashset, then take one element from the set and
search on both direction for the longest. each time an element is checked, remove it from
set till the set is empty. this way, the complexity is O(n)

2. set all O surrounded by X in a matrix to X: using flood fill way in graph to solve it.
first for each O on first/last row and first/last column, apply flood fill because all O
adjacent to O on first/last row/column should not be set to X. each time if the element
checked is O, we set it to be #, and put the code for the element's (x,y) index to queue
for later checking around it. when this done, we go through all elements again and set all
O to X, and all # back to O. (when we need to process current element/node later, we
usually use queue/stack)

3. search a word in a matrix of characters: using DFS of graphs. first check edge cases.
maintain one boolean matrix of same size to track if an element is visited already. loop
through all elements and take each element as the starting search point. the recursive
search function will do a DFS search around the starting element. remember to reset the
visited flag before/after each search returned. also be thorough about the conditions to
return (reached to the end of the target word) and conditions to stop (reached to the
matrix boundary/element visited/character doesn't match, etc.

4. word ladder: another example to use graph to do string searching. use graph BFS. edge
 cases checking. define a queue to assist BFS searching, also a set to keep strings
 visited to avoid cycles. for each character in the start string, there are 25 possible,
 try each and get a new string, if the string match the end string, return. otherwise,
 check if the new string already visited or not in the dict. if not, push it to the queue
 and update queue related assisting variables. when current level is done, move the next
 level (reset all queue related variables)

5. clone graph: this problem is testing graph traversing. there are BFS and DFS (binary tree
is a special graph). for BFS, we need a queue for nodes to be traversed, for DFS, we need
a stack to hold nodes to go through. We also need a map to hold each node and its copy,
and it also tracks if a node already be visited and copied. DFS can also be implemented
recursively. remember to link each neighbor copy to current node's copy's neighbor list

