1. access modifier: 
private: same class
default: same package
protected: same package or subclass
public: all

2. string pool is in heap memory

3. yield() transfers the currently running thread to a runnable state and also allows the other threads to execute. yield() is a static method, it does not release any lock

4. Threads run in shared memory spaces, but processes run in separate memory spaces.

5. Although it can be called on any Java object, the wait() method can only be called from a synchronized block.

6. The time for which the thread needs to enter the sleep state is mentioned inside the braces of the sleep() method. It is a static method

7. Serial Garbage Collector– Using only a single thread for garbage collection, freezes all threads. 
Parallel Garbage Collector– uses multiple threads for garbage collection, default one also freezes all threads. 
CMS Garbage Collector– Short for Concurrent Mark Sweep, uses multiple threads for scanning the heap memory for marking instances for eviction, followed by sweeping the marked instances
G1 Garbage Collector – Used for large heap memory areas. works by separating the heap memory into multiple regions and then executing garbage collection in them in parallel

8. Finalize: The finalize method performs the clean up just before the object is garbage collected
Finally: Any code inside the final block will be executed, irrespective of whether an exception is handled or not.

9. The value stored in a volatile variable is not read from the thread's cache memory but from the main memory. Volatile variables are primarily used during synchronization.

10. The value stored in a volatile variable is not read from the thread's cache memory but from the main memory. Volatile variables are primarily used during synchronization

11. OutOfMemoryError exception: 
Holding objects for too long
Trying to process too much data at the same time
Using a third-party library that caches strings
Using an application server that doesn't perform a memory cleanup post the deployment
When a native allocation can't be satisfied

11. When the method main() is not made static, the compiler throws an error because the main() is called by the JVM before any objects are made, and only static methods can be directly invoked via the class
main: JVM searches this method when starting the execution of any program, with the particular signature only

12. 
Boxing: The concept of putting a primitive value inside an object is called boxing.
Unboxing: Getting the primitive value from the object.
Autoboxing: Assigning a value directly to an integer object.
Auto unboxing: Getting the primitive value directly into the integer object.

13. memory leaks:
Memory Leak Through static Fields: Minimize the use of static variables. When using singletons, rely upon an implementation that lazily loads the object instead of eagerly loading
Through Unclosed Resources: Always use finally block to close resources. The code (even in the finally block) that closes the resources should not itself have any exceptions. When using Java 7+, we can make use of try-with-resources block
Improper equals() and hashCode() Implementations: As a rule of thumb, when defining new entities, always override equals() and hashCode() methods. It's not just enough to override, but these methods must be overridden in an optimal way as well
Inner Classes That Reference Outer Classes: If the inner class doesn't need access to the containing class members, consider turning it into a static class
Memory leaks with ThreadLocals: It's a good practice to clean-up ThreadLocals when they're no longer used — ThreadLocals provide the remove() method, which removes the current thread's value for this variable. It's even better to consider ThreadLocal as a resource that needs to be closed in a finally block just to make sure that it is always closed, even in the case of an exception

14. An application or system class loader loads our own files in the classpath. Extension class loaders load classes that are an extension of the standard core Java classes. A bootstrap or primordial class loader is the parent of all the others.the bootstrap class loader is written in native code, not Java – so it doesn't show up as a Java class
If the class isn't already loaded, it delegates the request to the parent class loader. This process happens recursively. Eventually, if the parent class loader doesn’t find the class, then the child class will look for classes in the file system itself
Class loaders follow the delegation model where on request to find a class or resource, a ClassLoader instance will delegate the search of the class or resource to the parent class loader. Let's say we have a request to load an application class into the JVM. The system class loader first delegates the loading of that class to its parent extension class loader which in turn delegates it to the bootstrap class loader. Only if the bootstrap and then the extension class loader is unsuccessful in loading the class, the system class loader tries to load the class itself.
As a consequence of the delegation model, it's easy to ensure unique classes as we always try to delegate upwards
children class loaders are visible to classes loaded by its parent class loaders.
For instance, classes loaded by the system class loader have visibility into classes loaded by the extension and Bootstrap class loaders but not vice-versa
