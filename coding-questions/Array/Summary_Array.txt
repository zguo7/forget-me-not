1. minimum length of sub array with sum bigger than target: maintain a start point, keep adding element to the sum variable from start index, when it's bigger than the target, try to move the start pointer to right by subtract the element at start index from the sum. updating min length. 
2. find missing number from an array: most straightforward way is to loop through the array and compare each element with its index, if they are not same, then return the index. Another not easy to think way is to use bit operation xor, xor 0-n and all elements of the array will get the missing element. same thinking as finding the only single no duplicate element in an array
3. moving zeros to end of an array: keep a pointer for all non-zero elements. looping through the array, move all non-zero elements to front of array, and set the rest of array all as zero
4. find the next permutation: check edge cases first. 1. from the right end, search for the index of the first descending digit, p. then search from the right for the index of the first digit that is bigger than the digit at p, q. swap value of p and q. if p+1< length-1, reverse digits between p+1 and the length-1 (inclusive)
5. plus one: need to maintain a variable for 'carry' (initialized as 1). starting from the last element, when the carry is not zero, add it to the element and take the remainder as the resulting element, carry will be the sum divided by 10, if the carry is zero, we return. when the loop is done, and the carry is not zero, we return an array of size (n+1) and set the first element to be 1. 
6. generate pascal triangle: the first and last element in each row is always 1. element i in row n equals the sum of element i and element i-1 in row n-1. 
7. generate the nth row of pascal triangle: there are n+1 elements in row n, create an array of size n+1, and fill it with 1. we calculate each row on the same array, we calculate from 2nd row (row 3), so looping from 0 to n-1, the calculation should start from i+1 to 1 for the ith row (we don't need to calculate the first and last element in each row, as they are always 1)
8. product exception self: it takes 2 traversing of the array, first looping is from right to left, set each element to be the product of all elements to its right. second looping is from left to right and for each element, times its values with product of all elements to its left
9. remove duplicate from an array: maintain one length pointer initialized to 0, loop through the array starting from index 1, if its' same as the element at length, move the index to next, otherwise, move both indice and set the element at length with the current element
10. remove duplicate from an array, but allow at most 2 duplicates: start from the third element, and compare each element with its previous 2 elements, if all same, ignore current element and move on; otherwise, move the pointer and set it with current element
11. remove all instances of a value from array, maintain 2 indices, one for the values to stay and one for the traversing, current. if the current value doesn't equal to the target, set element at stay with the value at current and move stay to next, otherwise, stay doesn't move
12. rotate an array to the right by k steps. straightforward way is create a new array of size n, and copy the k elements from right to the front of the new array, and then copy the n-k element to the left to the end of the array. An in-place solution is a bit tricky. it involves 3 reversion. first reverse the first n-k elements in place, then reverse the rest k elements in place, and finally reverse the whole array. Another in-palce solution is a bit complicated, but also easy to understand. we first compare k and n-k. if k is bigger, we take n-k as a block and swap it with the n-k elements next to it, and keep swapping like this till the end. similar when k is smaller. the rule is when 2 blocks are swapping, always move the smaller block towards the bigger direction. And this is not as efficient as the 3 reversion solution.
13. rotate n x n matrix by 90 degree: there are 2 ways to do it. First, do the rotation layer by layer from outer to inner, but this will be slow. A better way is to use mirroring or flipping. first, flipping the matrix along the diagonal (from top right to bottom left), and then doing top-down flipping along the horizontal line in middle. 
14. search in a matrix: use binary search and the complexity should be O(logm + logn). One way is to treat the matrix as a 1D array, l=1 and r=m*n-1. The other way is to do binary search on head of rows and find the row and then do binary search in the row. complexity should be same.
15. search in a rotated sorted array: still use binary search, but need to check if the target is in left half or right half based on the comparison between the left and middle. of course if the middle is equal to target, just return
16. search in a rotated sorted array with duplicates: same as No.15, only add a checking between element at l and element at m, if they are equal, l++
17. find the insertion index in a sorted array: loop through the array and return the index of the first element that is bigger than the target. could also use binary search, which is faster then the looping way, but need to be careful about the ending condition
18. find the range of the target in a sorted array: still use binary search, when find the target, keep search to its left and right. in worst case, the complexity could be O(n), usually it should be O(logn). another way is to still use binary search when searching the boundary, the complexity will be O(logn), but the control is complicated.
19. set zero in matrix, set entire row and column to be zero if their intersection element is zero: in-place solution is to use the first row and first column to mark which row and column needs to set zero, but first we want to check if first row and first column need to set zero and put them into a couple of boolean variables. 
20. sort colors in an array, basically sort an array with 3 values (0, 1, 2), could have duplicates: straightforward way is to count each value in one loop and then in a second loop, fill the array with the number of each value. this takes 2 loops. A second way can probably do it in one loop. use 2 pointers, one start from 0 and the other start from the end. based on the values of start and end (8 combinations), we decide which pointer to move and when to swap values.
21. traverse matrix in spiral way: solution is straightforward, just be careful about the index update, startx, endx, starty, endy
22. generate a n x n spiral matrix with numbers from 1 to n^2: same as No.21, create a n x n matrix and traverse it in a spiral way and set its element with values from 1 to n^2
23. find unique sorted subset of an array: since we need all subsets to be sorted, we need to sort the array first. then we search subsets of size from 0 to n in the array. we use recursive way to search subset of each size. the target size will be pass in to the recursive function, if current set size equal to target, add the set to result. otherwise, we pick one element just bigger (if equal, there will be duplicate) than the largest number in the set and then call the function with the target size decreased by 1. Another much better way to implement it is to sort the array first, then represent each element with a bit, then subset will be a value from 0 to 2^n. in case we have duplicate elements, we need to use a set to eliminate duplicate result. 
24. find unique sorted subset of an array with duplicates: sorted the array first. then we can use one bit map to one element, there will be totally 2^n combinations. to eliminate duplicates, we need to use a set to hold results, to check each bit equals to 1 or not, we need to use bit shifting and & with 1. at the end, we need to convert the set to list
25. find ranges in a sorted array: one looping of the array. use 2 pointers, start and end. initialize start and end with the current element, then increase end one by one and compare it with corresponding element, when they are not equal, add the range start-end to the result list. till end reaches end of array




