1. Is tree balanced: recursive traverse. using a number to represent tree height. -1 is for unbalanced. when left or right is unbalanced, return -1. when height difference between left and right is bigger than 1, return -1; otherwise return max height of left and right plus 1. 
2. Inorder traverse binary tree in non-recursive way: use a linked list as a stack, as long as root is not empty, push it to stack, then set root to its left. when reaching to the most left child, start popping up, add reach root's value to result, and check if there is right child, if yes, push it to stack, till root is null AND stack is empty
3. Postorder traverse binary tree in non-recursive way: this is quite complicated, define a linked list as a stack, define a pre node and a current node, and using them to determine if the flow is going down in the tree or going up to the root, and then determine whether to push or pop. Also, need to use peek for current node before actually popping.
4. Preorder traverse binary tree in non-recursive way: define a linked list as a stack. when root not null or stack not empty, add root value to result, push root's left to stack. when root is null, pop root from stack and push root's right to stack. keep going till stack is empty and root is null.
